
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN COLON COMMA ELSE FLOAT IDENTIFIER IF INPUT INTEGER OPERATOR PAREN_CLOSE PAREN_OPEN PRINT RELATIONAL_OPERATOR STRINGprogram : statement\n| program statementstatement : print_statement\n| if_statement\n| assignment_statement\n| input_statementprint_statement : PRINT PAREN_OPEN expression_list PAREN_CLOSEexpression_list : expression\n| expression_list COMMA expressionexpression : INTEGER\n| FLOAT\n| IDENTIFIER\n| STRING\n| PAREN_OPEN expression PAREN_CLOSE\n| expression OPERATOR expression\n| expression RELATIONAL_OPERATOR expressionif_statement : IF expression COLON block ELSE COLON blockblock : statement\n| block statementassignment_statement : IDENTIFIER ASSIGN expressioninput_statement : INPUT PAREN_OPEN expression PAREN_CLOSE'
    
_lr_action_items = {'PRINT':([0,1,2,3,4,5,6,11,14,15,16,17,23,27,29,31,32,33,34,35,36,39,40,41,],[7,7,-1,-3,-4,-5,-6,-2,-10,-11,-12,-13,7,-20,-7,7,-18,-15,-16,-14,-21,-19,7,7,]),'IF':([0,1,2,3,4,5,6,11,14,15,16,17,23,27,29,31,32,33,34,35,36,39,40,41,],[8,8,-1,-3,-4,-5,-6,-2,-10,-11,-12,-13,8,-20,-7,8,-18,-15,-16,-14,-21,-19,8,8,]),'IDENTIFIER':([0,1,2,3,4,5,6,8,11,12,14,15,16,17,18,19,20,23,24,25,27,29,30,31,32,33,34,35,36,39,40,41,],[9,9,-1,-3,-4,-5,-6,16,-2,16,-10,-11,-12,-13,16,16,16,9,16,16,-20,-7,16,9,-18,-15,-16,-14,-21,-19,9,9,]),'INPUT':([0,1,2,3,4,5,6,11,14,15,16,17,23,27,29,31,32,33,34,35,36,39,40,41,],[10,10,-1,-3,-4,-5,-6,-2,-10,-11,-12,-13,10,-20,-7,10,-18,-15,-16,-14,-21,-19,10,10,]),'$end':([1,2,3,4,5,6,11,14,15,16,17,27,29,32,33,34,35,36,39,41,],[0,-1,-3,-4,-5,-6,-2,-10,-11,-12,-13,-20,-7,-18,-15,-16,-14,-21,-19,-17,]),'ELSE':([3,4,5,6,14,15,16,17,27,29,31,32,33,34,35,36,39,41,],[-3,-4,-5,-6,-10,-11,-12,-13,-20,-7,38,-18,-15,-16,-14,-21,-19,-17,]),'PAREN_OPEN':([7,8,10,12,18,19,20,24,25,30,],[12,18,20,18,18,18,18,18,18,18,]),'INTEGER':([8,12,18,19,20,24,25,30,],[14,14,14,14,14,14,14,14,]),'FLOAT':([8,12,18,19,20,24,25,30,],[15,15,15,15,15,15,15,15,]),'STRING':([8,12,18,19,20,24,25,30,],[17,17,17,17,17,17,17,17,]),'ASSIGN':([9,],[19,]),'COLON':([13,14,15,16,17,33,34,35,38,],[23,-10,-11,-12,-13,-15,-16,-14,40,]),'OPERATOR':([13,14,15,16,17,22,26,27,28,33,34,35,37,],[24,-10,-11,-12,-13,24,24,24,24,24,24,-14,24,]),'RELATIONAL_OPERATOR':([13,14,15,16,17,22,26,27,28,33,34,35,37,],[25,-10,-11,-12,-13,25,25,25,25,25,25,-14,25,]),'PAREN_CLOSE':([14,15,16,17,21,22,26,28,33,34,35,37,],[-10,-11,-12,-13,29,-8,35,36,-15,-16,-14,-9,]),'COMMA':([14,15,16,17,21,22,33,34,35,37,],[-10,-11,-12,-13,30,-8,-15,-16,-14,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,1,23,31,40,41,],[2,11,32,39,32,39,]),'print_statement':([0,1,23,31,40,41,],[3,3,3,3,3,3,]),'if_statement':([0,1,23,31,40,41,],[4,4,4,4,4,4,]),'assignment_statement':([0,1,23,31,40,41,],[5,5,5,5,5,5,]),'input_statement':([0,1,23,31,40,41,],[6,6,6,6,6,6,]),'expression':([8,12,18,19,20,24,25,30,],[13,22,26,27,28,33,34,37,]),'expression_list':([12,],[21,]),'block':([23,40,],[31,41,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','sari_compiler.py',71),
  ('program -> program statement','program',2,'p_program','sari_compiler.py',72),
  ('statement -> print_statement','statement',1,'p_statement','sari_compiler.py',80),
  ('statement -> if_statement','statement',1,'p_statement','sari_compiler.py',81),
  ('statement -> assignment_statement','statement',1,'p_statement','sari_compiler.py',82),
  ('statement -> input_statement','statement',1,'p_statement','sari_compiler.py',83),
  ('print_statement -> PRINT PAREN_OPEN expression_list PAREN_CLOSE','print_statement',4,'p_print_statement','sari_compiler.py',88),
  ('expression_list -> expression','expression_list',1,'p_expression_list','sari_compiler.py',93),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','sari_compiler.py',94),
  ('expression -> INTEGER','expression',1,'p_expression','sari_compiler.py',102),
  ('expression -> FLOAT','expression',1,'p_expression','sari_compiler.py',103),
  ('expression -> IDENTIFIER','expression',1,'p_expression','sari_compiler.py',104),
  ('expression -> STRING','expression',1,'p_expression','sari_compiler.py',105),
  ('expression -> PAREN_OPEN expression PAREN_CLOSE','expression',3,'p_expression','sari_compiler.py',106),
  ('expression -> expression OPERATOR expression','expression',3,'p_expression','sari_compiler.py',107),
  ('expression -> expression RELATIONAL_OPERATOR expression','expression',3,'p_expression','sari_compiler.py',108),
  ('if_statement -> IF expression COLON block ELSE COLON block','if_statement',7,'p_if_statement','sari_compiler.py',128),
  ('block -> statement','block',1,'p_block','sari_compiler.py',133),
  ('block -> block statement','block',2,'p_block','sari_compiler.py',134),
  ('assignment_statement -> IDENTIFIER ASSIGN expression','assignment_statement',3,'p_assignment_statement','sari_compiler.py',142),
  ('input_statement -> INPUT PAREN_OPEN expression PAREN_CLOSE','input_statement',4,'p_input_statement','sari_compiler.py',147),
]
